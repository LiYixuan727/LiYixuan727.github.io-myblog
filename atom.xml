<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Natural Language Processing from 01 to 99</title>
  
  
  <link href="https://liyixuan727.github.io/atom.xml" rel="self"/>
  
  <link href="https://liyixuan727.github.io/"/>
  <updated>2023-12-26T15:56:33.160Z</updated>
  <id>https://liyixuan727.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Algorithm: 链表 (linked list)</title>
    <link href="https://liyixuan727.github.io/2023/12/26/algo-linked-list/"/>
    <id>https://liyixuan727.github.io/2023/12/26/algo-linked-list/</id>
    <published>2023-12-26T15:38:54.000Z</published>
    <updated>2023-12-26T15:56:33.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://tsejx.github.io/data-structure-and-algorithms-guidebook/data-structure/linear-list/linear-list">📚 Data Structure and Algorithms Guidebook: 链表</a></p></blockquote><ul><li><strong>单链表（Linked List）</strong>，即用一组地址任意的存储单元存放线性表中的数据元素。</li></ul><p>链表中的数据是以结点来表示的，每个结点的构成：元素（数据元素的映象）+指针（指示后继元素存储位置），元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。</p><ul><li><strong>静态链表（Static Linked List）</strong>，即用数组描述的链表。</li></ul><p>使用静态链表存储数据，数据全部存储在数组中（和顺序表一样），但存储位置是随机的，数据之间「一对一」的逻辑关系通过一个整形变量（称为「游标」，和指针功能类似）维持（和链表类似）。</p><ul><li><strong>循环链表（Circular Linked List）</strong>，将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环。</li></ul><p>循环链表解决了一个很麻烦的问题。如何从当中一个结点触发，访问到链表的全部结点。</p><ul><li><strong>双向链表又称双链表（Double Linked List）</strong>，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。</li></ul><p>从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。所以，一般我们都构造双向循环链表。</p><span id="more"></span><p> <br/> <br/></p><h4 id="Definition-for-linked-list"><a href="#Definition-for-linked-list" class="headerlink" title="Definition for linked list."></a>Definition for linked list.</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">ListNode</span><span class="params">(val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.val = val;</span><br><span class="line">  <span class="keyword">this</span>.next = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Definition-for-doubly-linked-list"><a href="#Definition-for-doubly-linked-list" class="headerlink" title="Definition for doubly-linked list."></a>Definition for doubly-linked list.</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    DoublyListNode next, prev;</span><br><span class="line">    <span class="built_in">DoublyListNode</span>(<span class="type">int</span> x) &#123;val = x;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tsejx.github.io/data-structure-and-algorithms-guidebook/data-structure/linear-list/linear-list&quot;&gt;📚 Data Structure and Algorithms Guidebook: 链表&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单链表（Linked List）&lt;/strong&gt;，即用一组地址任意的存储单元存放线性表中的数据元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链表中的数据是以结点来表示的，每个结点的构成：元素（数据元素的映象）+指针（指示后继元素存储位置），元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态链表（Static Linked List）&lt;/strong&gt;，即用数组描述的链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用静态链表存储数据，数据全部存储在数组中（和顺序表一样），但存储位置是随机的，数据之间「一对一」的逻辑关系通过一个整形变量（称为「游标」，和指针功能类似）维持（和链表类似）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;循环链表（Circular Linked List）&lt;/strong&gt;，将单链表中终端结点的指针端由空指针改为指向头结点，就使整个单链表形成一个环。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;循环链表解决了一个很麻烦的问题。如何从当中一个结点触发，访问到链表的全部结点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双向链表又称双链表（Double Linked List）&lt;/strong&gt;，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。所以，一般我们都构造双向循环链表。&lt;/p&gt;</summary>
    
    
    
    <category term="Algorithm - linked list" scheme="https://liyixuan727.github.io/categories/Algorithm-linked-list/"/>
    
    <category term="LeetCode" scheme="https://liyixuan727.github.io/categories/Algorithm-linked-list/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>Algorithm: 二叉树 (binary tree)</title>
    <link href="https://liyixuan727.github.io/2023/12/24/algo-binary-tree/"/>
    <id>https://liyixuan727.github.io/2023/12/24/algo-binary-tree/</id>
    <published>2023-12-24T15:54:17.000Z</published>
    <updated>2023-12-26T15:56:30.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://tsejx.github.io/data-structure-and-algorithms-guidebook/data-structure/tree/binary-tree">📚 Data Structure and Algorithms Guidebook: 二叉树</a></p></blockquote><p>二叉树（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。通常分支被称作 左子树 或 右子树。二叉树的分支具有左右次序，不能随意颠倒。</p><p>树和二叉树的三个主要差别：</p><ul><li>树的节点个数至少为 1，而二叉树的节点个数可以为 0</li><li>树中的最大度数（节点数量）没有限制，而二叉树的节点的最大度数为 2</li><li>树的节点没有左右之分，而二叉树的节点有左右之分</li></ul><span id="more"></span><h2 id="二叉树的类型"><a href="#二叉树的类型" class="headerlink" title="二叉树的类型"></a>二叉树的类型</h2> <br/><ul><li><h4 id="满二叉树（Full-Binary-Tree）"><a href="#满二叉树（Full-Binary-Tree）" class="headerlink" title="满二叉树（Full Binary Tree）"></a>满二叉树（Full Binary Tree）</h4></li></ul> <br/><ul><li><h4 id="完全二叉树（Complete-Binary-Tree）"><a href="#完全二叉树（Complete-Binary-Tree）" class="headerlink" title="完全二叉树（Complete Binary Tree）"></a>完全二叉树（Complete Binary Tree）</h4> 对于一棵二叉树，假设其深度为 d(d &gt; 1)。除了第 d 层外，其他各层的节点树目均已达最大值，且第 d 层所有节点从左向右连续地紧密排列</li></ul> <br/><ul><li><h5 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a><font color= #DCDCDC>堆（Heap）</font></h5></li></ul> <br/><ul><li><h4 id="二叉搜索树（Binary-Search-Tree）"><a href="#二叉搜索树（Binary-Search-Tree）" class="headerlink" title="二叉搜索树（Binary Search Tree）"></a>二叉搜索树（Binary Search Tree）</h4><p> 也称为二叉查找树、有序二叉树（Ordered Binary Tree）或排序二叉树（Sorted Binary Tree），是指一棵空树或者具有下列性质的二叉树：</p> <ul>     <li>若任意节点的 左子树 不为空，则左子树上所有节点的值 均小于 它的根节点的值</li>        <li>若任意节点的 右子树 不为空，则右子树上所有节点的值 均大于或等于 它的根节点的值</li>        <li>任意节点的左、右子树也分别为二叉搜索树</li>        <li>没有键值相等的节点</li>    </ul></li></ul><img src="https://tsejx.github.io/data-structure-and-algorithms-guidebook/static/binary-search-tree.5d170107.png" style="zoom:25%" /><p> <br/><br/></p><ul><li><h4 id="平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于-1-的二叉树"><a href="#平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于-1-的二叉树" class="headerlink" title="平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于 1 的二叉树"></a>平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于 1 的二叉树</h4></li></ul> <br/><ul><li><h5 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a><font color= #DCDCDC>AVL 树</font></h5></li></ul> <br/><ul><li><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a><font color= #DCDCDC>红黑树</font></h5></li></ul> <br/><h3 id="Definition-in-Python"><a href="#Definition-in-Python" class="headerlink" title="Definition in Python"></a>Definition in Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">         self.val = val</span><br><span class="line">         self.left = left</span><br><span class="line">         self.right = right</span><br></pre></td></tr></table></figure><h3 id="preorder-inorder-postorder"><a href="#preorder-inorder-postorder" class="headerlink" title="preorder &amp; inorder &amp; postorder"></a>preorder &amp; inorder &amp; postorder</h3><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="a binary tree"></p><ul><li>preorder &#x3D; [3,9,20,15,7]</li><li>inorder &#x3D; [9,3,15,20,7]</li><li>postorder &#x3D; [9,15,7,20,3]</li></ul><p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&envId=top-interview-150">🟠 LeetCode 105 - Construct Binary Tree from Preorder and Inorder Traversal</a><br><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/?envType=study-plan-v2&envId=top-interview-150">🟠 LeetCode 106 - Construct Binary Tree from Inorder and Postorder Traversal</a></p><h3 id="Recursive-DFS-Iterative-DFS-BFS"><a href="#Recursive-DFS-Iterative-DFS-BFS" class="headerlink" title="Recursive DFS &amp; Iterative DFS &amp; BFS"></a>Recursive DFS &amp; Iterative DFS &amp; BFS</h3><p><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/description/?envType=study-plan-v2&envId=top-interview-150">🟠 129. Sum Root to Leaf Numbers</a></p><blockquote><p><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/solutions/1556417/c-python-recursive-iterative-dfs-bfs-morris-traversal-o-1-beats-100">Solution</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://tsejx.github.io/data-structure-and-algorithms-guidebook/data-structure/tree/binary-tree&quot;&gt;📚 Data Structure and Algorithms Guidebook: 二叉树&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二叉树（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。通常分支被称作 左子树 或 右子树。二叉树的分支具有左右次序，不能随意颠倒。&lt;/p&gt;
&lt;p&gt;树和二叉树的三个主要差别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树的节点个数至少为 1，而二叉树的节点个数可以为 0&lt;/li&gt;
&lt;li&gt;树中的最大度数（节点数量）没有限制，而二叉树的节点的最大度数为 2&lt;/li&gt;
&lt;li&gt;树的节点没有左右之分，而二叉树的节点有左右之分&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Algorithm - binary tree" scheme="https://liyixuan727.github.io/categories/Algorithm-binary-tree/"/>
    
    <category term="LeetCode" scheme="https://liyixuan727.github.io/categories/Algorithm-binary-tree/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>Guessing how much longer my game can still survive by data analysis</title>
    <link href="https://liyixuan727.github.io/2023/12/24/data-analysis-for-a-game/"/>
    <id>https://liyixuan727.github.io/2023/12/24/data-analysis-for-a-game/</id>
    <published>2023-12-24T05:31:06.000Z</published>
    <updated>2023-12-26T15:56:28.751Z</updated>
    
    <content type="html"><![CDATA[<p>从以下几个方面 (待补充) 分析这破游戏能存活到我推出下轮箱活的可能性🙂</p><ul><li>YouTube MV 播放量 (增量)</li><li>游戏活动卡线</li><li>手游APP流水</li><li>周边谷价 (?)</li><li>同人产出 (?)</li><li>…</li></ul><span id="more"></span><h3 id="YouTube-MV-播放量"><a href="#YouTube-MV-播放量" class="headerlink" title="YouTube MV 播放量"></a>YouTube MV 播放量</h3><p>📺 <a href="https://www.youtube.com/@ensemble_stars/videos">あんスタチャンネル Channel</a><br>📺 <a href="https://www.youtube.com/@happyelementskk/videos">Happy Elements株式会社 Channel</a></p><h3 id="游戏活动卡线"><a href="#游戏活动卡线" class="headerlink" title="游戏活动卡线"></a>游戏活动卡线</h3><p>💎 <a href="https://gamerch.com/ensemble-star-music/entry/142181">往届活动•日服</a><br>💎 <a href="https://zh.moegirl.org.cn/zh-hans/%E5%81%B6%E5%83%8F%E6%A2%A6%E5%B9%BB%E7%A5%AD/%E5%8E%86%E5%B1%8A%E6%B4%BB%E5%8A%A8%E5%BD%A2%E5%BC%8F">往届活动•国服</a></p><p>👇下面数据截止至 <em>No87.分かれ道＊憧れた姿とフラッシュバック 岔路口＊憧憬的身姿与Flashback</em> - 朔间零箱活 (2023年 11月15日 15:00 ～ 11月23日 22:00)</p><p><img src="https://pbs.twimg.com/media/F_toUHzbAAAu8lk?format=jpg&name=medium" alt="あんさんぶるスターズ！！Music イベント 1枚取り、完凸人数まとめ"></p><p align="right">—— Data from <a href="https://https://twitter.com/MEMO__enst.">❤︎ ❤︎ (@MEMO__enst) / X</a></p><h3 id="手游APP流水"><a href="#手游APP流水" class="headerlink" title="手游APP流水"></a>手游APP流水</h3><p>💰 <a href="https://game-i.daa.jp/?APP/1494428618#bbs">セルラン分析&#x2F;ゲーム株『Game-i』</a></p><h3 id="周边谷价"><a href="#周边谷价" class="headerlink" title="周边谷价"></a>周边谷价</h3><ul><li>Twitter</li></ul><h3 id="同人产出"><a href="#同人产出" class="headerlink" title="同人产出"></a>同人产出</h3><ul><li>Pixiv</li><li>骏河屋</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;从以下几个方面 (待补充) 分析这破游戏能存活到我推出下轮箱活的可能性🙂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YouTube MV 播放量 (增量)&lt;/li&gt;
&lt;li&gt;游戏活动卡线&lt;/li&gt;
&lt;li&gt;手游APP流水&lt;/li&gt;
&lt;li&gt;周边谷价 (?)&lt;/li&gt;
&lt;li&gt;同人产出 (?)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Data Analysis" scheme="https://liyixuan727.github.io/categories/Data-Analysis/"/>
    
    <category term="Web Scraping" scheme="https://liyixuan727.github.io/categories/Data-Analysis/Web-Scraping/"/>
    
    <category term="Ensemble Stars!!" scheme="https://liyixuan727.github.io/categories/Data-Analysis/Web-Scraping/Ensemble-Stars/"/>
    
    
    <category term="Selenium" scheme="https://liyixuan727.github.io/tags/Selenium/"/>
    
    <category term="bs4" scheme="https://liyixuan727.github.io/tags/bs4/"/>
    
    <category term="pynimate" scheme="https://liyixuan727.github.io/tags/pynimate/"/>
    
    <category term="schedule/apscheduler" scheme="https://liyixuan727.github.io/tags/schedule-apscheduler/"/>
    
  </entry>
  
  <entry>
    <title>用 so-vits-svc-4.0 让 tcly 给我唱首歌</title>
    <link href="https://liyixuan727.github.io/2023/12/24/sing-for-me/"/>
    <id>https://liyixuan727.github.io/2023/12/24/sing-for-me/</id>
    <published>2023-12-24T03:46:40.000Z</published>
    <updated>2023-12-26T15:56:25.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为-so-vits-svc"><a href="#何为-so-vits-svc" class="headerlink" title="何为 so-vits-svc ?"></a>何为 so-vits-svc ?</h1><blockquote><p>“这个项目是为了让开发者最喜欢的动画角色唱歌而开发的”  —— 引用自<a href="https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/README_zh_CN.md">官方文档</a></p></blockquote><p>另外在文档中还有特地提到:</p><blockquote><p>本项目与 Vits 有着根本上的不同。Vits 是 TTS，本项目是 SVC。本项目无法实现 TTS，Vits 也无法实现 SVC，这两个项目的模型是完全不通用的。</p></blockquote><span id="more"></span><p>那么作为一个小白又想问了: TTS（Text-to-Speech，文本转语音）和 SVC（Singing Voice Conversion，歌声转换）的区别是什么呢?</p><br/><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/669340638">AI 声音工具软件，选择 TTS 还是 SVC ，看这一篇就够了</a></li></ul><blockquote><p>TTS：文本转语音技术是将文本信息转换为可听的语音信号。它通过自然语言处理、语言学规则和语音合成技术将文本数据转换为人类可理解的语音。TTS 的核心是语音合成，通常使用基于拼接的语音合成方法或者基于深度学习的语音合成方法（如WaveNet、Tacotron 等）。</p></blockquote><blockquote><p>SVC：声音（或歌声）转换技术是一种特殊的声音转换技术，主要关注将一个人的声音（或歌声）转换成另一个人的声音（或歌声），同时保留原始声音（或歌声）的旋律和节奏信息。SVC 通过分析源声音（或歌声）和目标声音（或歌声）的声学特征（如音色、音高等），然后应用这些特征到原始声音（或歌声）上，实现声音（或歌声）的转换。SVC 技术通常使用深度学习模型进行训练和实现。</p></blockquote><p>嗯嗯, 原来如此~</p><p>大致了解了一下 SVC 的背景, 那么二话不说就先来试一试 so-vits-svc-4.0 吧.</p><h2 id="so-vits-svc-4-0"><a href="#so-vits-svc-4-0" class="headerlink" title="so-vits-svc-4.0"></a>so-vits-svc-4.0</h2><blockquote><p>先放个大名鼎鼎的 GitHub 原项目链接: <a href="https://github.com/justinjohn0306/so-vits-svc-4.0/blob/4.0/README_zh_CN.md">https://github.com/justinjohn0306/so-vits-svc-4.0/blob/4.0/README_zh_CN.md</a></p></blockquote><!--more--><h3 id="一、第一步是挑选适合的训练音源"><a href="#一、第一步是挑选适合的训练音源" class="headerlink" title="一、第一步是挑选适合的训练音源!"></a>一、第一步是挑选适合的训练音源!</h3><p>正式开始前, 首先一个好东西: <a href="https://github.com/deezer/spleeter">spleeter</a> 人声伴奏自动分离.</p><p>分不同轨数:</p><ul><li>Vocals (singing voice) &#x2F; accompaniment separation (2 stems)</li><li>Vocals &#x2F; drums &#x2F; bass &#x2F; other separation (4 stems)</li><li>Vocals &#x2F; drums &#x2F; bass &#x2F; piano &#x2F; other separation (5 stems)</li></ul><p>可以接受的格式包括 mp3, mp4 等等.</p><h4 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies using conda</span></span><br><span class="line">conda install -c conda-forge ffmpeg libsndfile</span><br><span class="line"><span class="comment"># install spleeter with pip</span></span><br><span class="line">pip install spleeter</span><br><span class="line"><span class="comment"># download an example audio file (if you don&#x27;t have wget, use another tool for downloading)</span></span><br><span class="line">wget https://github.com/deezer/spleeter/raw/master/audio_example.mp3</span><br><span class="line"><span class="comment"># separate the example audio into two components</span></span><br><span class="line">spleeter separate -p spleeter:2stems -o output audio_example.mp3</span><br></pre></td></tr></table></figure><p>用起来倒是很快, 也很便捷, 但出来的效果只能说一般, 人声part各处模糊不清 (换首歌不知道会不会好一点😠)</p><h3 id="二、预处理原声音频"><a href="#二、预处理原声音频" class="headerlink" title="二、预处理原声音频"></a>二、预处理原声音频</h3><p><strong>以下都复制自原项目 ducumentation:</strong></p><h4 id="0-音频切片"><a href="#0-音频切片" class="headerlink" title="0. 音频切片"></a>0. 音频切片</h4><p>将音频切片至5s - 15s, 稍微长点也无伤大雅，实在太长可能会导致训练中途甚至预处理就爆显存。</p><p>可以使用<code>audio-slicer-GUI</code>、<code>audio-slicer-CLI</code></p><p>一般情况下只需调整其中的Minimum Interval，普通陈述素材通常保持默认即可，歌唱素材可以调整至100甚至50</p><p>切完之后手动删除过长过短的音频</p><h4 id="1-重采样至44100Hz单声道"><a href="#1-重采样至44100Hz单声道" class="headerlink" title="1. 重采样至44100Hz单声道"></a>1. 重采样至44100Hz单声道</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python resample.py</span><br></pre></td></tr></table></figure><h4 id="2-自动划分训练集、验证集，以及自动生成配置文件"><a href="#2-自动划分训练集、验证集，以及自动生成配置文件" class="headerlink" title="2. 自动划分训练集、验证集，以及自动生成配置文件"></a>2. 自动划分训练集、验证集，以及自动生成配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preprocess_flist_config.py</span><br></pre></td></tr></table></figure><h4 id="3-生成hubert与f0"><a href="#3-生成hubert与f0" class="headerlink" title="3. 生成hubert与f0"></a>3. 生成hubert与f0</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preprocess_hubert_f0.py</span><br></pre></td></tr></table></figure><p>执行完以上步骤后 dataset 目录便是预处理完成的数据，可以删除 dataset_raw 文件夹了</p><p>此时可以在生成的config.json修改部分参数</p><ul><li><p><code>keep_ckpts</code>：训练时保留最后几个模型，0为保留所有，默认只保留最后3个</p></li><li><p><code>all_in_mem</code>：加载所有数据集到内存中，某些平台的硬盘IO过于低下、同时内存容量 远大于 数据集体积时可以启用</p></li></ul><h3 id="三、下载预训练的模型文件"><a href="#三、下载预训练的模型文件" class="headerlink" title="三、下载预训练的模型文件"></a>三、下载预训练的模型文件</h3><ul><li><h5 id="必选项"><a href="#必选项" class="headerlink" title="必选项 :"></a>必选项 :</h5></li></ul><p>contentvec ：<code>checkpoint_best_legacy_500.pt</code> 放在hubert目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># contentvec</span><br><span class="line">http://obs.cstcloud.cn/share/obs/sankagenkeshi/checkpoint_best_legacy_500.pt</span><br><span class="line"></span><br><span class="line"># 也可手动下载放在hubert目录</span><br></pre></td></tr></table></figure><ul><li><h5 id="可选项"><a href="#可选项" class="headerlink" title="可选项 :"></a>可选项 :</h5></li></ul><p>soft vc hubert：<code>hubert-soft-0d54a1f4.pt</code> 放在hubert目录下</p><ul><li><h5 id="可选项-强烈推荐"><a href="#可选项-强烈推荐" class="headerlink" title="可选项 : (强烈推荐)"></a>可选项 : (强烈推荐)</h5></li></ul><p>自己预训练底模文件：<code>G_0.pth</code> <code>D_0.pth</code> 放在logs&#x2F;44k目录下</p><ul><li>预训练底模为必选项，因为据测试从零开始训练有概率不收敛，同时底模也能加快训练速度</li><li>预训练底模训练数据集包含云灏 即霜 辉宇·星AI 派蒙 绫地宁宁，覆盖男女生常见音域，可以认为是相对通用的底模</li><li>底模删除了optimizer speaker_embedding 等无关权重, 只可以用于初始化训练，无法用于推理</li><li>该底模和48khz底模通用</li></ul><br/><p><strong>这3个文件也可以手动通过JupyterLab上传到对应位置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键下载</span></span><br><span class="line"><span class="comment"># hubert</span></span><br><span class="line">wget -P hubert/ https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt</span><br><span class="line"><span class="comment"># G与D预训练模型</span></span><br><span class="line">wget -P logs/32k/ https://huggingface.co/innnky/sovits_pretrained/resolve/main/G_0.pth</span><br><span class="line">wget -P logs/32k/ https://huggingface.co/innnky/sovits_pretrained/resolve/main/D_0.pth</span><br></pre></td></tr></table></figure><h3 id="四、训练"><a href="#四、训练" class="headerlink" title="四、训练"></a>四、训练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -c configs/config.json -m 44k</span><br></pre></td></tr></table></figure><h3 id="五、推理"><a href="#五、推理" class="headerlink" title="五、推理"></a>五、推理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python inference_main.py -m <span class="string">&quot;logs/44k/G_30400.pth&quot;</span> -c <span class="string">&quot;configs/config.json&quot;</span> -n <span class="string">&quot;君の知らない物語-src.wav&quot;</span> -t 0 -s <span class="string">&quot;nen&quot;</span></span><br></pre></td></tr></table></figure><p><strong>参数解释:</strong></p><ul><li><p>必填项部分</p><ul><li>-m | –model_path：模型路径</li><li>-c | –config_path：配置文件路径</li><li>-n | –clean_names：wav 文件名列表，放在 raw 文件夹下</li><li>-t | –trans：音高调整，支持正负（半音）</li><li>-s | –spk_list：合成目标说话人名称</li><li>-cl | –clip：音频强制切片，默认0为自动切片，单位为秒&#x2F;s</li></ul></li><li><p>可选项部分：部分具体见下一节</p><ul><li>-lg | –linear_gradient：两段音频切片的交叉淡入长度，如果强制切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，单位为秒</li><li>-fmp | –f0_mean_pooling：是否对F0使用均值滤波器(池化)，对部分哑音有改善。注意，启动该选项会导致推理速度下降，默认关闭</li><li>-a | –auto_predict_f0：语音转换自动预测音高，转换歌声时不要打开这个会严重跑调</li><li>-cm | –cluster_model_path：聚类模型路径，如果没有训练聚类则随便填</li><li>-cr | –cluster_infer_ratio：聚类方案占比，范围0-1，若没有训练聚类模型则默认0即可</li><li>-eh | –enhance：是否使用NSF_HIFIGAN增强器,该选项对部分训练集少的模型有一定的音质增强效果，但是对训练好的模型有反面效果，默认关闭</li></ul></li></ul><h3 id="Web-UI"><a href="#Web-UI" class="headerlink" title="Web UI"></a>Web UI</h3><p>运行 <code>python webUI.py</code> 进入网页界面版.</p><h1 id="内存不足问题"><a href="#内存不足问题" class="headerlink" title="内存不足问题"></a>内存不足问题</h1><p>因为计算量很大, 需要在GPU环境运行.</p><p>这里首先是选择了在 Google Colab 提供的显卡上运行.</p><p>在 Colab Pro 的 plan 中提供以下硬件加速器:</p><ul><li>CPU</li><li>A100 GPU</li><li>V100 GPU</li><li>T4 GPU</li><li>TPU</li></ul><p>其中还包括 <code>高 RAM</code> 选项.</p><br/><p>🟧 <a href="https://colab.research.google.com/drive/1WZ6dtFqxA7C7CNkWLHoYTgM5JRXoc3G9?usp=sharing">我的Colab笔记本</a></p><h2 id="用Google-Colab训练"><a href="#用Google-Colab训练" class="headerlink" title="用Google Colab训练"></a>用Google Colab训练</h2><blockquote><p>参考文献:</p><ul><li><a href="https://zhuanlan.zhihu.com/p/618630799">【So-VITS&#x2F;VITS】炼丹速通指南</a></li></ul></blockquote><p>但无奈推理时依旧出现内存不足的问题:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OutOfMemoryError: CUDA out of memory. Tried to allocate <span class="number">13.50</span> GiB. </span><br><span class="line">GPU <span class="number">0</span> has a total capacty of <span class="number">15.77</span> GiB of which <span class="number">2.59</span> GiB <span class="keyword">is</span> free. </span><br><span class="line">Process <span class="number">16231</span> has <span class="number">13.18</span> GiB memory <span class="keyword">in</span> use. </span><br><span class="line">Of the allocated memory <span class="number">10.90</span> GiB <span class="keyword">is</span> allocated by PyTorch, <span class="keyword">and</span> <span class="number">1.90</span> GiB <span class="keyword">is</span> reserved by PyTorch but unallocated. </span><br><span class="line">If reserved but unallocated memory <span class="keyword">is</span> large <span class="keyword">try</span> setting max_split_size_mb to avoid fragmentation.  </span><br><span class="line">See documentation <span class="keyword">for</span> Memory Management <span class="keyword">and</span> PYTORCH_CUDA_ALLOC_CONF</span><br></pre></td></tr></table></figure><h1 id="其他一些代替方案"><a href="#其他一些代替方案" class="headerlink" title="其他一些代替方案"></a>其他一些代替方案</h1><h2 id="VITS-fast-fine-tuning"><a href="#VITS-fast-fine-tuning" class="headerlink" title="VITS-fast-fine-tuning"></a>VITS-fast-fine-tuning</h2><blockquote><p>官方文档: <a href="https://github.com/Plachtaa/VITS-fast-fine-tuning/blob/main/README_ZH.md">https://github.com/Plachtaa/VITS-fast-fine-tuning/blob/main/README_ZH.md</a></p></blockquote><p>相比 so-vits-svc-4.0 的一个优势是可以接受不同的训练音源文件, 包括:</p><ul><li><strong>so-vits-svc-4.0 唯一接受的训练数据</strong><ul><li>Short audio (5s至15s的音频切片)</li></ul></li><li>其他类型（单个不应长于20分钟）<ul><li>Long audio</li><li>Video</li><li>Video link</li></ul></li></ul><p>🟧 <a href="https://colab.research.google.com/drive/1fCMcU7b0CubdQcoA586Sq85QGwC7dvt8?usp=sharing">我的Colab笔记本</a></p><p>在微调完成后，可以在线尝试效果。<br>运行后会输出一个public URL, 点击进入网页版UI以使用模型.</p><p> <code>python VC_inference.py --model_dir ./OUTPUT_MODEL/G_latest.pth --share True</code></p><h2 id="DDSP-SVC"><a href="#DDSP-SVC" class="headerlink" title="DDSP-SVC"></a>DDSP-SVC</h2><blockquote><p>官方文档: <a href="https://github.com/yxlllc/DDSP-SVC/blob/master/cn_README.md">https://github.com/yxlllc/DDSP-SVC/blob/master/cn_README.md</a></p></blockquote><h2 id="so-vits-svc-fork"><a href="#so-vits-svc-fork" class="headerlink" title="so-vits-svc-fork"></a>so-vits-svc-fork</h2><blockquote><p>官方文档: <a href="https://github.com/voicepaw/so-vits-svc-fork/blob/main/README_zh_CN.md">https://github.com/voicepaw/so-vits-svc-fork/blob/main/README_zh_CN.md</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;何为-so-vits-svc&quot;&gt;&lt;a href=&quot;#何为-so-vits-svc&quot; class=&quot;headerlink&quot; title=&quot;何为 so-vits-svc ?&quot;&gt;&lt;/a&gt;何为 so-vits-svc ?&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;“这个项目是为了让开发者最喜欢的动画角色唱歌而开发的”  —— 引用自&lt;a href=&quot;https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/README_zh_CN.md&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外在文档中还有特地提到:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本项目与 Vits 有着根本上的不同。Vits 是 TTS，本项目是 SVC。本项目无法实现 TTS，Vits 也无法实现 SVC，这两个项目的模型是完全不通用的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Speech Processing - AI翻唱 - SVC" scheme="https://liyixuan727.github.io/categories/Speech-Processing-AI%E7%BF%BB%E5%94%B1-SVC/"/>
    
    <category term="Ensemble Stars!!" scheme="https://liyixuan727.github.io/categories/Speech-Processing-AI%E7%BF%BB%E5%94%B1-SVC/Ensemble-Stars/"/>
    
    
    <category term="so-vits-svc-4.0" scheme="https://liyixuan727.github.io/tags/so-vits-svc-4-0/"/>
    
    <category term="VITS-fast-fine-tuning" scheme="https://liyixuan727.github.io/tags/VITS-fast-fine-tuning/"/>
    
    <category term="DDSP-SVC" scheme="https://liyixuan727.github.io/tags/DDSP-SVC/"/>
    
    <category term="so-vits-svc-fork" scheme="https://liyixuan727.github.io/tags/so-vits-svc-fork/"/>
    
    <category term="spleeter" scheme="https://liyixuan727.github.io/tags/spleeter/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle竞赛: 用AI识别AI生成的文本</title>
    <link href="https://liyixuan727.github.io/2023/12/23/ai/"/>
    <id>https://liyixuan727.github.io/2023/12/23/ai/</id>
    <published>2023-12-23T08:21:55.000Z</published>
    <updated>2023-12-24T05:48:41.017Z</updated>
    
    
    
    
    <category term="Kaggle" scheme="https://liyixuan727.github.io/categories/Kaggle/"/>
    
    <category term="LLM" scheme="https://liyixuan727.github.io/categories/Kaggle/LLM/"/>
    
    
  </entry>
  
  <entry>
    <title>SQLite3数据库在Python中的使用指南</title>
    <link href="https://liyixuan727.github.io/2023/12/23/SQLite3/"/>
    <id>https://liyixuan727.github.io/2023/12/23/SQLite3/</id>
    <published>2023-12-23T07:59:28.000Z</published>
    <updated>2023-12-24T16:55:28.009Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite 是一个轻量级的关系型数据库管理系统，可以在本地存储数据，并且不需要安装额外的服务器。在 Python 中，我们可以使用 sqlite3 模块来访问 SQLite 数据库。</p><p>在本指南中，我们例举了如何使用 Python 中的 sqlite3 模块来创建、查询、更新和删除 SQLite 数据库中的表和数据。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">c.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE todo_list</span></span><br><span class="line"><span class="string">             (list_item text)&#x27;&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>如果表已经存在，使用 CREATE TABLE 语句会导致错误。为了避免这种情况，我们可以在 CREATE TABLE 语句中使用 IF NOT EXISTS 子句。下面是一个示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">c.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE IF NOT EXISTS todo_list</span></span><br><span class="line"><span class="string">             (list_item text)&#x27;&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询表</span></span><br><span class="line">c.execute(<span class="string">&#x27;SELECT * FROM todo_list&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取查询结果</span></span><br><span class="line">result = c.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除表中的所有数据</span></span><br><span class="line">c.execute(<span class="string">&#x27;DELETE FROM todo_list&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="新增表数据"><a href="#新增表数据" class="headerlink" title="新增表数据"></a>新增表数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 向表中添加数据</span></span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO todo_list values (&#x27;完成python sqlite3教程&#x27;)&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#关闭链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="更新表数据"><a href="#更新表数据" class="headerlink" title="更新表数据"></a>更新表数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更新表中的数据</span></span><br><span class="line">c.execute(<span class="string">&quot;UPDATE todo_list SET list_item=&#x27;完成sqlite3教程&#x27; WHERE list_item=&#x27;完成python sqlite3教程&#x27;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="一些tricky的点"><a href="#一些tricky的点" class="headerlink" title="一些tricky的点"></a>一些tricky的点</h2><ul><li>查询语句中的 ‘ 符号</li><li>批量操作</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;SQLite 是一个轻量级的关系型数据库管理系统，可以在本地存储数据，并且不需要安装额外的服务器。在 Python 中，我们可以使用 sqlite3 模块来访问 SQLite 数据库。&lt;/p&gt;
&lt;p&gt;在本指南中，我们例举了如何使用 Python 中的 sqlite3 模块来创建、查询、更新和删除 SQLite 数据库中的表和数据。&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://liyixuan727.github.io/categories/Database/"/>
    
    <category term="Python" scheme="https://liyixuan727.github.io/categories/Database/Python/"/>
    
    
    <category term="SQLite3" scheme="https://liyixuan727.github.io/tags/SQLite3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liyixuan727.github.io/2023/12/22/hello-world/"/>
    <id>https://liyixuan727.github.io/2023/12/22/hello-world/</id>
    <published>2023-12-22T22:28:06.164Z</published>
    <updated>2023-12-24T16:56:24.662Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="https://liyixuan727.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
