<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Natural Language Processing from 01 to 99</title>
  
  
  <link href="https://liyixuan727.github.io/atom.xml" rel="self"/>
  
  <link href="https://liyixuan727.github.io/"/>
  <updated>2023-12-24T04:58:44.399Z</updated>
  <id>https://liyixuan727.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 so-vits-svc-4.0 让 tcly 给我唱歌</title>
    <link href="https://liyixuan727.github.io/2023/12/24/sing-for-me/"/>
    <id>https://liyixuan727.github.io/2023/12/24/sing-for-me/</id>
    <published>2023-12-24T03:46:40.000Z</published>
    <updated>2023-12-24T04:58:44.399Z</updated>
    
    <content type="html"><![CDATA[<p>先放个 GitHub 项目链接: <a href="https://github.com/justinjohn0306/so-vits-svc-4.0/blob/4.0/README_zh_CN.md">https://github.com/justinjohn0306/so-vits-svc-4.0/blob/4.0/README_zh_CN.md</a></p><h2 id="第一步是挑选适合的训练音源"><a href="#第一步是挑选适合的训练音源" class="headerlink" title="第一步是挑选适合的训练音源!"></a>第一步是挑选适合的训练音源!</h2><p>正式开始前, 首先一个好东西: <a href="https://github.com/deezer/spleeter">spleeter</a> 人声伴奏自动分离.</p><p>分不同轨数:</p><ul><li>Vocals (singing voice) &#x2F; accompaniment separation (2 stems)</li><li>Vocals &#x2F; drums &#x2F; bass &#x2F; other separation (4 stems)</li><li>Vocals &#x2F; drums &#x2F; bass &#x2F; piano &#x2F; other separation (5 stems)</li></ul><p>可以接受的格式包括 mp3, mp4 等等.</p><h4 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies using conda</span></span><br><span class="line">conda install -c conda-forge ffmpeg libsndfile</span><br><span class="line"><span class="comment"># install spleeter with pip</span></span><br><span class="line">pip install spleeter</span><br><span class="line"><span class="comment"># download an example audio file (if you don&#x27;t have wget, use another tool for downloading)</span></span><br><span class="line">wget https://github.com/deezer/spleeter/raw/master/audio_example.mp3</span><br><span class="line"><span class="comment"># separate the example audio into two components</span></span><br><span class="line">spleeter separate -p spleeter:2stems -o output audio_example.mp3</span><br></pre></td></tr></table></figure><p>用起来倒是很快, 也很便捷, 但出来的效果只能说一般, 人声part各处模糊不清 (换首歌不知道会不会好一点😠)</p><h2 id="预处理原声音频"><a href="#预处理原声音频" class="headerlink" title="预处理原声音频"></a>预处理原声音频</h2><p>以下复制自原项目 ducumentation:</p><h4 id="0-音频切片"><a href="#0-音频切片" class="headerlink" title="0. 音频切片"></a>0. 音频切片</h4><p>将音频切片至5s - 15s, 稍微长点也无伤大雅，实在太长可能会导致训练中途甚至预处理就爆显存。</p><p>可以使用audio-slicer-GUI、audio-slicer-CLI</p><p>一般情况下只需调整其中的Minimum Interval，普通陈述素材通常保持默认即可，歌唱素材可以调整至100甚至50</p><p>切完之后手动删除过长过短的音频</p><h4 id="1-重采样至44100Hz单声道"><a href="#1-重采样至44100Hz单声道" class="headerlink" title="1. 重采样至44100Hz单声道"></a>1. 重采样至44100Hz单声道</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python resample.py</span><br></pre></td></tr></table></figure><h4 id="2-自动划分训练集、验证集，以及自动生成配置文件"><a href="#2-自动划分训练集、验证集，以及自动生成配置文件" class="headerlink" title="2. 自动划分训练集、验证集，以及自动生成配置文件"></a>2. 自动划分训练集、验证集，以及自动生成配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preprocess_flist_config.py</span><br></pre></td></tr></table></figure><h4 id="3-生成hubert与f0"><a href="#3-生成hubert与f0" class="headerlink" title="3. 生成hubert与f0"></a>3. 生成hubert与f0</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python preprocess_hubert_f0.py</span><br></pre></td></tr></table></figure><p>执行完以上步骤后 dataset 目录便是预处理完成的数据，可以删除 dataset_raw 文件夹了</p><p>此时可以在生成的config.json修改部分参数</p><ul><li><p><code>keep_ckpts</code>：训练时保留最后几个模型，0为保留所有，默认只保留最后3个</p></li><li><p><code>all_in_mem</code>：加载所有数据集到内存中，某些平台的硬盘IO过于低下、同时内存容量 远大于 数据集体积时可以启用</p></li></ul><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py -c configs/config.json -m 44k</span><br></pre></td></tr></table></figure><h2 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python inference_main.py -m <span class="string">&quot;logs/44k/G_30400.pth&quot;</span> -c <span class="string">&quot;configs/config.json&quot;</span> -n <span class="string">&quot;君の知らない物語-src.wav&quot;</span> -t 0 -s <span class="string">&quot;nen&quot;</span></span><br></pre></td></tr></table></figure><p><strong>参数解释:</strong></p><ul><li><p>必填项部分</p><ul><li>-m | –model_path：模型路径</li><li>-c | –config_path：配置文件路径</li><li>-n | –clean_names：wav 文件名列表，放在 raw 文件夹下</li><li>-t | –trans：音高调整，支持正负（半音）</li><li>-s | –spk_list：合成目标说话人名称</li><li>-cl | –clip：音频强制切片，默认0为自动切片，单位为秒&#x2F;s</li></ul></li><li><p>可选项部分：部分具体见下一节</p><ul><li>-lg | –linear_gradient：两段音频切片的交叉淡入长度，如果强制切片后出现人声不连贯可调整该数值，如果连贯建议采用默认值0，单位为秒</li><li>-fmp | –f0_mean_pooling：是否对F0使用均值滤波器(池化)，对部分哑音有改善。注意，启动该选项会导致推理速度下降，默认关闭</li><li>-a | –auto_predict_f0：语音转换自动预测音高，转换歌声时不要打开这个会严重跑调</li><li>-cm | –cluster_model_path：聚类模型路径，如果没有训练聚类则随便填</li><li>-cr | –cluster_infer_ratio：聚类方案占比，范围0-1，若没有训练聚类模型则默认0即可</li><li>-eh | –enhance：是否使用NSF_HIFIGAN增强器,该选项对部分训练集少的模型有一定的音质增强效果，但是对训练好的模型有反面效果，默认关闭</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先放个 GitHub 项目链接: &lt;a href=&quot;https://github.com/justinjohn0306/so-vits-svc-4.0/blob/4.0/README_zh_CN.md&quot;&gt;https://github.com/justinjohn0306/s</summary>
      
    
    
    
    <category term="AI翻唱" scheme="https://liyixuan727.github.io/categories/AI%E7%BF%BB%E5%94%B1/"/>
    
    
    <category term="so-vits-svc-4.0" scheme="https://liyixuan727.github.io/tags/so-vits-svc-4-0/"/>
    
  </entry>
  
  <entry>
    <title>用AI识别AI生成的文本</title>
    <link href="https://liyixuan727.github.io/2023/12/23/ai/"/>
    <id>https://liyixuan727.github.io/2023/12/23/ai/</id>
    <published>2023-12-23T08:21:55.000Z</published>
    <updated>2023-12-23T23:45:25.401Z</updated>
    
    
    
    
    <category term="Kaggle" scheme="https://liyixuan727.github.io/categories/Kaggle/"/>
    
    <category term="LLM" scheme="https://liyixuan727.github.io/categories/Kaggle/LLM/"/>
    
    
  </entry>
  
  <entry>
    <title>SQLite3数据库在Python中的使用指南</title>
    <link href="https://liyixuan727.github.io/2023/12/23/SQLite3/"/>
    <id>https://liyixuan727.github.io/2023/12/23/SQLite3/</id>
    <published>2023-12-23T07:59:28.000Z</published>
    <updated>2023-12-23T23:56:22.015Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite 是一个轻量级的关系型数据库管理系统，可以在本地存储数据，并且不需要安装额外的服务器。在 Python 中，我们可以使用 sqlite3 模块来访问 SQLite 数据库。</p><p>在本指南中，我们例举了如何使用 Python 中的 sqlite3 模块来创建、查询、更新和删除 SQLite 数据库中的表和数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">c.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE todo_list</span></span><br><span class="line"><span class="string">             (list_item text)&#x27;&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>如果表已经存在，使用 CREATE TABLE 语句会导致错误。为了避免这种情况，我们可以在 CREATE TABLE 语句中使用 IF NOT EXISTS 子句。下面是一个示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">c.execute(<span class="string">&#x27;&#x27;&#x27;CREATE TABLE IF NOT EXISTS todo_list</span></span><br><span class="line"><span class="string">             (list_item text)&#x27;&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查询表</span></span><br><span class="line">c.execute(<span class="string">&#x27;SELECT * FROM todo_list&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取查询结果</span></span><br><span class="line">result = c.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除表中的所有数据</span></span><br><span class="line">c.execute(<span class="string">&#x27;DELETE FROM todo_list&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="新增表数据"><a href="#新增表数据" class="headerlink" title="新增表数据"></a>新增表数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 向表中添加数据</span></span><br><span class="line">c.execute(<span class="string">&quot;INSERT INTO todo_list values (&#x27;完成python sqlite3教程&#x27;)&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#关闭链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="更新表数据"><a href="#更新表数据" class="headerlink" title="更新表数据"></a>更新表数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 更新表中的数据</span></span><br><span class="line">c.execute(<span class="string">&quot;UPDATE todo_list SET list_item=&#x27;完成sqlite3教程&#x27; WHERE list_item=&#x27;完成python sqlite3教程&#x27;&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="一些tricky的点"><a href="#一些tricky的点" class="headerlink" title="一些tricky的点"></a>一些tricky的点</h2><ul><li>查询语句中的 ‘ 符号</li><li>批量操作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SQLite 是一个轻量级的关系型数据库管理系统，可以在本地存储数据，并且不需要安装额外的服务器。在 Python 中，我们可以使用 sqlite3 模块来访问 SQLite 数据库。&lt;/p&gt;
&lt;p&gt;在本指南中，我们例举了如何使用 Python 中的 sqlite3 模块来</summary>
      
    
    
    
    <category term="数据库" scheme="https://liyixuan727.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Python" scheme="https://liyixuan727.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Python/"/>
    
    
    <category term="SQLite3" scheme="https://liyixuan727.github.io/tags/SQLite3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://liyixuan727.github.io/2023/12/22/hello-world/"/>
    <id>https://liyixuan727.github.io/2023/12/22/hello-world/</id>
    <published>2023-12-22T22:28:06.164Z</published>
    <updated>2023-12-23T23:49:48.160Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://liyixuan727.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
